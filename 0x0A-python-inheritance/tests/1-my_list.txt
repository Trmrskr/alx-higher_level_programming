The ``1-my_list`` Test module

Check for module level docstring:
	>>> mod = __import__("1-my_list").__doc__
	>>> len(mod) > 1
	True

Check for class docstring:
	>>> c = __import__("1-my_list").MyList.__doc__
	>>> len(c) > 1
	True

Check for method docstring:
	>>> meth = __import__("1-my_list").MyList.print_sorted.__doc__
	>>> len(meth) > 1
	True

Checking that MyList inherits from list:
	>>> issubclass(MyList, list)
	True

Instantiating an instance of ``MyList``:
	>>> l = MyList()
	
Checking for empty list:
	>>> l.print_sorted()
	[]

Appending items to ``MyList``:
	>>> l.append(1)
	>>> l.append(4)
	>>> l.append(2)
	>>> l.append(3)
	>>> l.append(5)
	>>> print(l)
	[1, 4, 2, 3, 5]

Print Sorted ``MyList``:
	>>> print(sorted(l))
	[1, 2, 3, 4, 5]

Reverse Sorted ``MyList``:
	>>> print(reversed(l))
	[5, 4, 3, 2, 1]

Print Sorted ``MyList`` using print_sorted:
	>>> l.print_sorted()
	[1, 2, 3, 4, 5]

Too many arguments to print_sorted():
	>>> l.print_sorted()
	Traceback (most recent call last):
	...
	TypeError: print_sorted() takes 1 positional argument but 2 were given
